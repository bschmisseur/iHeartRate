{"ast":null,"code":"var _jsxFileName = \"/Users/bryceschmisseur/Documents/CST-452/IHeartRate/frontend-fire/src/pages/Dashboard.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport HeartSerivce from './../services/HeartRateService';\nimport SideBar from '../components/Navigation/SideBar';\nimport { makeStyles } from '@material-ui/core';\nimport Grid from '@material-ui/core/Grid';\nimport Cookies from 'universal-cookie';\nimport BPMCard from './../components/Dashboard/BPMCard';\nimport Table from './../components/Dashboard/Table';\nimport Graph from './../components/Dashboard/Graph';\nimport NoData from './../components/Dashboard/NoData';\nimport moment from 'moment';\nimport Heading from './../components/Dashboard/Heading';\nimport Footer from './../components/Navigation/Footer';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport SelectDates from './../components/Dashboard/SelectDates';\nimport LoadingPage from './../components/Navigation/Loading';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  content: {\n    paddingTop: '25px',\n    paddingRight: '25px',\n    paddingLeft: '110px',\n    '@media (min-width: 900px)': {\n      paddingLeft: '265px'\n    }\n  },\n  welcome: {\n    textAlign: 'left',\n    fontWeight: '300',\n    fontSize: '28px'\n  },\n  output: {\n    textAlign: 'left',\n    fontWeight: '100',\n    fontSize: '22px'\n  }\n}));\n\nfunction createData(unNum, bpm, date) {\n  return {\n    unNum,\n    bpm,\n    date\n  };\n}\n\nconst Dashboard = () => {\n  _s();\n\n  const matchWidth = useMediaQuery('(min-width:1150px)');\n  const matchWidthSec = useMediaQuery('(min-width:600px)');\n  const classes = useStyles();\n  const cookies = new Cookies();\n  const curAppleId = cookies.get('currAppleId');\n  const displayName = cookies.get('displayName');\n  const [heartData, setHeartData] = useState([]);\n  const [rows, setRows] = useState([]);\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n  const [openNoData, setOpenNoData] = useState(false);\n  const [datesButtonDis, setDatesButtonDis] = useState(false);\n  const [openDate, setOpenDate] = useState(false);\n  const [avgRate, setAvgRate] = useState(0);\n  const [lastRec, setLastRec] = useState(0);\n  const [selectedDateFrom, setSelectedDateFrom] = useState(new Date());\n  const [selectedDateTo, setSelectedDateTo] = useState(new Date());\n  const [data, setData] = useState(JSON.parse(\"{}\"));\n  const [viewData, setViewData] = useState('full');\n  const [isLoadingPage, setIsLoadingPage] = useState(false);\n\n  if (cookies.get('currAppleId') === undefined) {\n    window.location.href = '/';\n  }\n\n  useEffect(() => {\n    setIsLoadingPage(true);\n    HeartSerivce.getUsers(curAppleId).then(response => {\n      let arr = [];\n      Object.keys(response.data).forEach(function (key) {\n        let currDate = moment(response.data[key].date);\n        let HeartRate = {\n          bpm: response.data[key].bpm,\n          date: currDate,\n          user_id: response.data[key].userid\n        };\n        arr.push(HeartRate);\n      });\n      let arrTable = arr.reverse();\n\n      if (arrTable.length <= 0) {\n        setDatesButtonDis(true);\n        setOpenNoData(true);\n      } else {\n        setLastRec(arrTable[0].bpm);\n        setHeartData(arrTable);\n        let data = [];\n\n        for (let i = 0; i < arrTable.length; i++) {\n          data.push(createData(i, arrTable[i].bpm, arrTable[i].date.format('lll')));\n        }\n\n        setRows(data);\n        let chartdata = \"{\";\n        let currAveRate = 0;\n\n        for (let i = page * rowsPerPage; i < page * rowsPerPage + rowsPerPage; i++) {\n          if (i > arrTable.length - 1) {\n            chartdata = chartdata.substr(0, chartdata.length - 1);\n            break;\n          }\n\n          currAveRate += arrTable[i].bpm;\n          chartdata += '\"' + arrTable[i].date.format('MMM D h:m.s') + '\": ' + arrTable[i].bpm;\n\n          if (i !== page * rowsPerPage + rowsPerPage - 1) {\n            chartdata += \",\";\n          }\n        }\n\n        chartdata += \"}\";\n        setData(JSON.parse(chartdata));\n        setAvgRate(Math.round(currAveRate / rowsPerPage));\n      }\n    });\n    setIsLoadingPage(false); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n    generteGraphData(heartData, rows.length, rowsPerPage, newPage);\n  };\n\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(+event.target.value);\n    setPage(0); //updateGraph(0, +event.target.value, heartData);\n\n    generteGraphData(heartData, rows.length, +event.target.value, page);\n  };\n\n  const handleCloseNoData = () => {\n    setOpenNoData(false);\n  };\n\n  const handleClickOpenDate = () => {\n    setOpenDate(true);\n  };\n\n  const handleCloseDate = () => {\n    let dateFrom = moment(selectedDateFrom);\n    let dateTo = moment(selectedDateTo);\n\n    if (dateFrom.isAfter(dateTo) || dateTo.isBefore(dateFrom)) {\n      alert(\"The date start must not be after the end date or the end date must not be before the start date!\");\n    } else {\n      setOpenDate(false);\n      let tableData = [];\n      let chartData = \"{\";\n      let heartRates = 0;\n      let numRates = 0;\n\n      for (let i = 0; i < heartData.length; i++) {\n        let currDate = heartData[i].date;\n\n        if (currDate.isAfter(dateFrom) && currDate.isBefore(dateTo)) {\n          heartRates += heartData[i].bpm;\n          numRates++;\n          tableData.push(createData(i, heartData[i].bpm, heartData[i].date.format('lll')));\n          chartData += '\"' + heartData[i].date.format('MMM D, YYYY h:m.s') + '\": ' + heartData[i].bpm + ',';\n        }\n      }\n\n      if (numRates > 0) {\n        setAvgRate(Math.round(heartRates / numRates));\n        chartData = chartData.substring(0, chartData.length - 1);\n        chartData += \"}\";\n        setRows(tableData);\n        setPage(0);\n        setRowsPerPage(-1);\n        setData(JSON.parse(chartData));\n      } else {\n        setOpenDate(true);\n        alert(\"No data found between those dates\");\n      }\n    }\n  };\n\n  const handleDateChangeFrom = date => {\n    setSelectedDateFrom(date);\n  };\n\n  const handleDateChangeTo = date => {\n    setSelectedDateTo(date);\n  };\n\n  const handleReset = () => {\n    setOpenDate(false);\n    setRowsPerPage(10);\n    setPage(0);\n    generteGraphData(heartData, heartData.length, 10, 0);\n  };\n\n  const handelRefresh = () => {\n    setViewData(\"full\");\n    HeartSerivce.getUsers(curAppleId).then(response => {\n      let arr = [];\n      Object.keys(response.data).forEach(function (key) {\n        let currDate = moment(response.data[key].date);\n        let HeartRate = {\n          bpm: response.data[key].bpm,\n          date: currDate,\n          user_id: response.data[key].userid\n        };\n        arr.push(HeartRate);\n      });\n      let arrTable = arr.reverse();\n      setLastRec(arrTable[0].bpm);\n\n      if (arrTable.length <= 0) {\n        setDatesButtonDis(true);\n        setOpenNoData(true);\n      } else {\n        setHeartData(arrTable);\n        let data = [];\n\n        for (let i = 0; i < arrTable.length; i++) {\n          data.push(createData(i, arrTable[i].bpm, arrTable[i].date.format('lll')));\n        }\n\n        setRows(data);\n        let chartdata = \"{\";\n        let currAveRate = 0;\n\n        for (let i = page * rowsPerPage; i < page * rowsPerPage + rowsPerPage; i++) {\n          if (i > arrTable.length - 1) {\n            chartdata = chartdata.substr(0, chartdata.length - 1);\n            break;\n          }\n\n          currAveRate += arrTable[i].bpm;\n          chartdata += '\"' + arrTable[i].date.format('MMM D h:m.s') + '\": ' + arrTable[i].bpm;\n\n          if (i !== page * rowsPerPage + rowsPerPage - 1) {\n            chartdata += \",\";\n          }\n        }\n\n        chartdata += \"}\";\n        setData(JSON.parse(chartdata));\n        setAvgRate(Math.round(currAveRate / rowsPerPage));\n      }\n    });\n  };\n\n  const handleTableClick = () => {\n    setViewData(\"table\");\n  };\n\n  const handleGraphClick = () => {\n    setViewData(\"graph\");\n  };\n\n  const generteGraphData = (tableData, length, numElements, page) => {\n    if (numElements !== -1) {\n      let chartdata = \"{\";\n      let currAveRate = 0;\n\n      for (let i = page * numElements; i < page * numElements + numElements; i++) {\n        if (i > tableData.length - 1) {\n          chartdata = chartdata.substr(0, chartdata.length - 1);\n          break;\n        }\n\n        currAveRate += tableData[i].bpm;\n        chartdata += '\"' + tableData[i].date.format('MMM D h:m.s') + '\": ' + tableData[i].bpm;\n\n        if (i !== page * numElements + numElements - 1) {\n          chartdata += \",\";\n        }\n      }\n\n      chartdata += \"}\";\n      setData(JSON.parse(chartdata));\n      setAvgRate(Math.round(currAveRate / numElements));\n    } else {\n      let chartdata = \"{\";\n      let currAveRate = 0;\n\n      for (let i = 0; i < length; i++) {\n        currAveRate += tableData[i].bpm;\n        chartdata += '\"' + tableData[i].date.format('MMM D h:m.s') + '\": ' + tableData[i].bpm;\n\n        if (i !== length - 1) {\n          chartdata += \",\";\n        }\n      }\n\n      chartdata += \"}\";\n      setData(JSON.parse(chartdata));\n      setAvgRate(Math.round(currAveRate / length));\n    }\n  };\n\n  var body = /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      sm: matchWidth ? 6 : 12,\n      className: classes.tableHeight,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: '10px',\n          height: '73vh'\n        },\n        children: /*#__PURE__*/_jsxDEV(Table, {\n          rows: rows,\n          page: page,\n          rowsPerPage: rowsPerPage,\n          handleChangePage: handleChangePage,\n          handleChangeRowsPerPage: handleChangeRowsPerPage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      sm: matchWidth ? 6 : 12,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: '10px'\n        },\n        children: /*#__PURE__*/_jsxDEV(Graph, {\n          data: data\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          sm: matchWidthSec ? 6 : 12,\n          style: {\n            height: '36vh'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              paddingRight: '10px',\n              paddingLeft: '10px',\n              paddingTop: '10px',\n              width: '100%'\n            },\n            children: /*#__PURE__*/_jsxDEV(BPMCard, {\n              title: \"Average Heart Rate\",\n              bpm: avgRate\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 301,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          sm: matchWidthSec ? 6 : 12,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              paddingRight: '10px',\n              paddingLeft: '10px',\n              paddingTop: '10px',\n              width: '100%'\n            },\n            children: /*#__PURE__*/_jsxDEV(BPMCard, {\n              title: \"Last Recoded Heart Rate\",\n              bpm: lastRec\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 306,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 282,\n    columnNumber: 17\n  }, this);\n\n  if (viewData === \"table\") {\n    body = /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: '15px',\n        height: '78vh',\n        width: '100%'\n      },\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        rows: rows,\n        page: page,\n        rowsPerPage: rowsPerPage,\n        handleChangePage: handleChangePage,\n        handleChangeRowsPerPage: handleChangeRowsPerPage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 17\n    }, this);\n  } else if (viewData === \"graph\") {\n    body = /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: '15px',\n        height: '78vh',\n        width: '100%'\n      },\n      children: /*#__PURE__*/_jsxDEV(Graph, {\n        data: data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 17\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(LoadingPage, {\n      open: isLoadingPage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(NoData, {\n      displayName: displayName,\n      openNoData: openNoData,\n      setOpenNoData: setOpenNoData,\n      handleCloseNoData: handleCloseNoData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SelectDates, {\n      openDate: openDate,\n      handleCloseDate: handleCloseDate,\n      selectedDateFrom: selectedDateFrom,\n      selectedDateTo: selectedDateTo,\n      handleDateChangeFrom: handleDateChangeFrom,\n      handleDateChangeTo: handleDateChangeTo,\n      handleReset: handleReset\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SideBar, {\n      handleTableClick: handleTableClick,\n      handleGraphClick: handleGraphClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.content,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        children: [/*#__PURE__*/_jsxDEV(Heading, {\n          displayName: displayName,\n          datesButtonDis: datesButtonDis,\n          handleClickOpenDate: handleClickOpenDate,\n          handelRefresh: handelRefresh\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 21\n        }, this), body, /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 330,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Dashboard, \"J2dRPRpC7DuMHdcrYI5DsYuyfbc=\", false, function () {\n  return [useMediaQuery, useMediaQuery, useStyles];\n});\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["/Users/bryceschmisseur/Documents/CST-452/IHeartRate/frontend-fire/src/pages/Dashboard.js"],"names":["useState","useEffect","HeartSerivce","SideBar","makeStyles","Grid","Cookies","BPMCard","Table","Graph","NoData","moment","Heading","Footer","useMediaQuery","SelectDates","LoadingPage","useStyles","theme","content","paddingTop","paddingRight","paddingLeft","welcome","textAlign","fontWeight","fontSize","output","createData","unNum","bpm","date","Dashboard","matchWidth","matchWidthSec","classes","cookies","curAppleId","get","displayName","heartData","setHeartData","rows","setRows","page","setPage","rowsPerPage","setRowsPerPage","openNoData","setOpenNoData","datesButtonDis","setDatesButtonDis","openDate","setOpenDate","avgRate","setAvgRate","lastRec","setLastRec","selectedDateFrom","setSelectedDateFrom","Date","selectedDateTo","setSelectedDateTo","data","setData","JSON","parse","viewData","setViewData","isLoadingPage","setIsLoadingPage","undefined","window","location","href","getUsers","then","response","arr","Object","keys","forEach","key","currDate","HeartRate","user_id","userid","push","arrTable","reverse","length","i","format","chartdata","currAveRate","substr","Math","round","handleChangePage","event","newPage","generteGraphData","handleChangeRowsPerPage","target","value","handleCloseNoData","handleClickOpenDate","handleCloseDate","dateFrom","dateTo","isAfter","isBefore","alert","tableData","chartData","heartRates","numRates","substring","handleDateChangeFrom","handleDateChangeTo","handleReset","handelRefresh","handleTableClick","handleGraphClick","numElements","body","tableHeight","padding","height","width"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,OAAOC,OAAP,MAAoB,kCAApB;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,OAAOC,OAAP,MAAoB,mCAApB;AACA,OAAOC,KAAP,MAAkB,iCAAlB;AACA,OAAOC,KAAP,MAAkB,iCAAlB;AACA,OAAOC,MAAP,MAAmB,kCAAnB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,OAAP,MAAoB,mCAApB;AACA,OAAOC,MAAP,MAAmB,mCAAnB;AACA,OAAOC,aAAP,MAA0B,iCAA1B;AACA,OAAOC,WAAP,MAAwB,uCAAxB;AACA,OAAOC,WAAP,MAAwB,oCAAxB;;AAGA,MAAMC,SAAS,GAAGb,UAAU,CAAEc,KAAD,KAAY;AACrCC,EAAAA,OAAO,EAAE;AACLC,IAAAA,UAAU,EAAE,MADP;AAELC,IAAAA,YAAY,EAAE,MAFT;AAGLC,IAAAA,WAAW,EAAE,OAHR;AAIL,iCAA6B;AACzBA,MAAAA,WAAW,EAAE;AADY;AAJxB,GAD4B;AASrCC,EAAAA,OAAO,EAAE;AACLC,IAAAA,SAAS,EAAE,MADN;AAELC,IAAAA,UAAU,EAAE,KAFP;AAGLC,IAAAA,QAAQ,EAAE;AAHL,GAT4B;AAcrCC,EAAAA,MAAM,EAAE;AACJH,IAAAA,SAAS,EAAE,MADP;AAEJC,IAAAA,UAAU,EAAE,KAFR;AAGJC,IAAAA,QAAQ,EAAE;AAHN;AAd6B,CAAZ,CAAD,CAA5B;;AAqBA,SAASE,UAAT,CAAoBC,KAApB,EAA2BC,GAA3B,EAAgCC,IAAhC,EAAsC;AAClC,SAAO;AAACF,IAAAA,KAAD;AAAQC,IAAAA,GAAR;AAAaC,IAAAA;AAAb,GAAP;AACH;;AAED,MAAMC,SAAS,GAAG,MAAM;AAAA;;AACpB,QAAMC,UAAU,GAAGnB,aAAa,CAAC,oBAAD,CAAhC;AACA,QAAMoB,aAAa,GAAGpB,aAAa,CAAC,mBAAD,CAAnC;AAEA,QAAMqB,OAAO,GAAGlB,SAAS,EAAzB;AACA,QAAMmB,OAAO,GAAG,IAAI9B,OAAJ,EAAhB;AACA,QAAM+B,UAAU,GAAGD,OAAO,CAACE,GAAR,CAAY,aAAZ,CAAnB;AACA,QAAMC,WAAW,GAAGH,OAAO,CAACE,GAAR,CAAY,aAAZ,CAApB;AACA,QAAM,CAACE,SAAD,EAAYC,YAAZ,IAA4BzC,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAAC0C,IAAD,EAAOC,OAAP,IAAkB3C,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAAC4C,IAAD,EAAOC,OAAP,IAAkB7C,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM,CAAC8C,WAAD,EAAcC,cAAd,IAAgC/C,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACgD,UAAD,EAAaC,aAAb,IAA8BjD,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM,CAACkD,cAAD,EAAiBC,iBAAjB,IAAsCnD,QAAQ,CAAC,KAAD,CAApD;AACA,QAAM,CAACoD,QAAD,EAAWC,WAAX,IAA0BrD,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACsD,OAAD,EAAUC,UAAV,IAAwBvD,QAAQ,CAAC,CAAD,CAAtC;AACA,QAAM,CAACwD,OAAD,EAAUC,UAAV,IAAwBzD,QAAQ,CAAC,CAAD,CAAtC;AACA,QAAM,CAAC0D,gBAAD,EAAmBC,mBAAnB,IAA0C3D,QAAQ,CAAC,IAAI4D,IAAJ,EAAD,CAAxD;AACA,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsC9D,QAAQ,CAAC,IAAI4D,IAAJ,EAAD,CAApD;AACA,QAAM,CAACG,IAAD,EAAOC,OAAP,IAAkBhE,QAAQ,CAACiE,IAAI,CAACC,KAAL,CAAW,IAAX,CAAD,CAAhC;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BpE,QAAQ,CAAC,MAAD,CAAxC;AACA,QAAM,CAACqE,aAAD,EAAgBC,gBAAhB,IAAoCtE,QAAQ,CAAC,KAAD,CAAlD;;AAEA,MAAGoC,OAAO,CAACE,GAAR,CAAY,aAAZ,MAA+BiC,SAAlC,EAA4C;AACxCC,IAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,GAAvB;AACH;;AAGDzE,EAAAA,SAAS,CAAC,MAAM;AACZqE,IAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACApE,IAAAA,YAAY,CAACyE,QAAb,CAAsBtC,UAAtB,EAAkCuC,IAAlC,CAAuCC,QAAQ,IAAI;AAC/C,UAAIC,GAAG,GAAG,EAAV;AACAC,MAAAA,MAAM,CAACC,IAAP,CAAYH,QAAQ,CAACd,IAArB,EAA2BkB,OAA3B,CAAmC,UAASC,GAAT,EAAc;AAC7C,YAAIC,QAAQ,GAAGxE,MAAM,CAACkE,QAAQ,CAACd,IAAT,CAAcmB,GAAd,EAAmBnD,IAApB,CAArB;AACA,YAAIqD,SAAS,GAAG;AACZtD,UAAAA,GAAG,EAAE+C,QAAQ,CAACd,IAAT,CAAcmB,GAAd,EAAmBpD,GADZ;AAEZC,UAAAA,IAAI,EAAEoD,QAFM;AAGZE,UAAAA,OAAO,EAAER,QAAQ,CAACd,IAAT,CAAcmB,GAAd,EAAmBI;AAHhB,SAAhB;AAKAR,QAAAA,GAAG,CAACS,IAAJ,CAASH,SAAT;AACH,OARD;AASA,UAAII,QAAQ,GAAGV,GAAG,CAACW,OAAJ,EAAf;;AACA,UAAGD,QAAQ,CAACE,MAAT,IAAmB,CAAtB,EACA;AACIvC,QAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACAF,QAAAA,aAAa,CAAC,IAAD,CAAb;AACH,OAJD,MAIO;AACHQ,QAAAA,UAAU,CAAC+B,QAAQ,CAAC,CAAD,CAAR,CAAY1D,GAAb,CAAV;AACAW,QAAAA,YAAY,CAAC+C,QAAD,CAAZ;AACA,YAAIzB,IAAI,GAAG,EAAX;;AACA,aAAI,IAAI4B,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGH,QAAQ,CAACE,MAA5B,EAAoCC,CAAC,EAArC,EAAwC;AACpC5B,UAAAA,IAAI,CAACwB,IAAL,CAAU3D,UAAU,CAAC+D,CAAD,EAAIH,QAAQ,CAACG,CAAD,CAAR,CAAY7D,GAAhB,EAAqB0D,QAAQ,CAACG,CAAD,CAAR,CAAY5D,IAAZ,CAAiB6D,MAAjB,CAAwB,KAAxB,CAArB,CAApB;AACH;;AACDjD,QAAAA,OAAO,CAACoB,IAAD,CAAP;AACA,YAAI8B,SAAS,GAAG,GAAhB;AACA,YAAIC,WAAW,GAAG,CAAlB;;AACA,aAAI,IAAIH,CAAC,GAAK/C,IAAI,GAAGE,WAArB,EAAoC6C,CAAC,GAAK/C,IAAI,GAAGE,WAAR,GAAuBA,WAAhE,EAA8E6C,CAAC,EAA/E,EAAkF;AAC9E,cAAGA,CAAC,GAAGH,QAAQ,CAACE,MAAT,GAAkB,CAAzB,EACA;AACIG,YAAAA,SAAS,GAAGA,SAAS,CAACE,MAAV,CAAiB,CAAjB,EAAoBF,SAAS,CAACH,MAAV,GAAkB,CAAtC,CAAZ;AACA;AACH;;AACDI,UAAAA,WAAW,IAAIN,QAAQ,CAACG,CAAD,CAAR,CAAY7D,GAA3B;AACA+D,UAAAA,SAAS,IAAI,MAAML,QAAQ,CAACG,CAAD,CAAR,CAAY5D,IAAZ,CAAiB6D,MAAjB,CAAwB,aAAxB,CAAN,GAA+C,KAA/C,GAAuDJ,QAAQ,CAACG,CAAD,CAAR,CAAY7D,GAAhF;;AACA,cAAG6D,CAAC,KAAO/C,IAAI,GAAGE,WAAR,GAAuBA,WAAxB,GAAuC,CAAhD,EAAkD;AAC9C+C,YAAAA,SAAS,IAAI,GAAb;AACH;AACJ;;AACDA,QAAAA,SAAS,IAAI,GAAb;AACA7B,QAAAA,OAAO,CAACC,IAAI,CAACC,KAAL,CAAW2B,SAAX,CAAD,CAAP;AACAtC,QAAAA,UAAU,CAACyC,IAAI,CAACC,KAAL,CAAWH,WAAW,GAAGhD,WAAzB,CAAD,CAAV;AACH;AACJ,KA1CD;AA2CAwB,IAAAA,gBAAgB,CAAC,KAAD,CAAhB,CA7CY,CA8ChB;AACC,GA/CQ,EA+CN,EA/CM,CAAT;;AAiDA,QAAM4B,gBAAgB,GAAG,CAACC,KAAD,EAAQC,OAAR,KAAoB;AACzCvD,IAAAA,OAAO,CAACuD,OAAD,CAAP;AACAC,IAAAA,gBAAgB,CAAC7D,SAAD,EAAYE,IAAI,CAACgD,MAAjB,EAAyB5C,WAAzB,EAAsCsD,OAAtC,CAAhB;AACH,GAHD;;AAKA,QAAME,uBAAuB,GAAIH,KAAD,IAAW;AACvCpD,IAAAA,cAAc,CAAC,CAACoD,KAAK,CAACI,MAAN,CAAaC,KAAf,CAAd;AACA3D,IAAAA,OAAO,CAAC,CAAD,CAAP,CAFuC,CAGvC;;AACAwD,IAAAA,gBAAgB,CAAC7D,SAAD,EAAYE,IAAI,CAACgD,MAAjB,EAAyB,CAACS,KAAK,CAACI,MAAN,CAAaC,KAAvC,EAA8C5D,IAA9C,CAAhB;AACH,GALD;;AAOA,QAAM6D,iBAAiB,GAAG,MAAM;AAC5BxD,IAAAA,aAAa,CAAC,KAAD,CAAb;AACH,GAFD;;AAIA,QAAMyD,mBAAmB,GAAG,MAAM;AAC9BrD,IAAAA,WAAW,CAAC,IAAD,CAAX;AACH,GAFD;;AAIA,QAAMsD,eAAe,GAAG,MAAM;AAC1B,QAAIC,QAAQ,GAAGjG,MAAM,CAAC+C,gBAAD,CAArB;AACA,QAAImD,MAAM,GAAGlG,MAAM,CAACkD,cAAD,CAAnB;;AACA,QAAG+C,QAAQ,CAACE,OAAT,CAAiBD,MAAjB,KAA4BA,MAAM,CAACE,QAAP,CAAgBH,QAAhB,CAA/B,EAAyD;AACrDI,MAAAA,KAAK,CAAC,kGAAD,CAAL;AACH,KAFD,MAEO;AACH3D,MAAAA,WAAW,CAAC,KAAD,CAAX;AACA,UAAI4D,SAAS,GAAG,EAAhB;AACA,UAAIC,SAAS,GAAG,GAAhB;AACA,UAAIC,UAAU,GAAG,CAAjB;AACA,UAAIC,QAAQ,GAAG,CAAf;;AACA,WAAI,IAAIzB,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGnD,SAAS,CAACkD,MAA7B,EAAqCC,CAAC,EAAtC,EAAyC;AACrC,YAAIR,QAAQ,GAAG3C,SAAS,CAACmD,CAAD,CAAT,CAAa5D,IAA5B;;AACA,YAAGoD,QAAQ,CAAC2B,OAAT,CAAiBF,QAAjB,KAA8BzB,QAAQ,CAAC4B,QAAT,CAAkBF,MAAlB,CAAjC,EAA2D;AACvDM,UAAAA,UAAU,IAAI3E,SAAS,CAACmD,CAAD,CAAT,CAAa7D,GAA3B;AACAsF,UAAAA,QAAQ;AACRH,UAAAA,SAAS,CAAC1B,IAAV,CAAe3D,UAAU,CAAC+D,CAAD,EAAInD,SAAS,CAACmD,CAAD,CAAT,CAAa7D,GAAjB,EAAsBU,SAAS,CAACmD,CAAD,CAAT,CAAa5D,IAAb,CAAkB6D,MAAlB,CAAyB,KAAzB,CAAtB,CAAzB;AACAsB,UAAAA,SAAS,IAAI,MAAM1E,SAAS,CAACmD,CAAD,CAAT,CAAa5D,IAAb,CAAkB6D,MAAlB,CAAyB,mBAAzB,CAAN,GAAsD,KAAtD,GAA8DpD,SAAS,CAACmD,CAAD,CAAT,CAAa7D,GAA3E,GAAiF,GAA9F;AACH;AACJ;;AACD,UAAIsF,QAAQ,GAAG,CAAf,EAAkB;AACd7D,QAAAA,UAAU,CAACyC,IAAI,CAACC,KAAL,CAAWkB,UAAU,GAAGC,QAAxB,CAAD,CAAV;AACAF,QAAAA,SAAS,GAAGA,SAAS,CAACG,SAAV,CAAoB,CAApB,EAAuBH,SAAS,CAACxB,MAAV,GAAmB,CAA1C,CAAZ;AACAwB,QAAAA,SAAS,IAAI,GAAb;AACAvE,QAAAA,OAAO,CAACsE,SAAD,CAAP;AACApE,QAAAA,OAAO,CAAC,CAAD,CAAP;AACAE,QAAAA,cAAc,CAAC,CAAC,CAAF,CAAd;AACAiB,QAAAA,OAAO,CAACC,IAAI,CAACC,KAAL,CAAWgD,SAAX,CAAD,CAAP;AACH,OARD,MAQO;AACH7D,QAAAA,WAAW,CAAC,IAAD,CAAX;AACA2D,QAAAA,KAAK,CAAC,mCAAD,CAAL;AACH;AACJ;AACJ,GAjCD;;AAmCA,QAAMM,oBAAoB,GAAIvF,IAAD,IAAU;AACnC4B,IAAAA,mBAAmB,CAAC5B,IAAD,CAAnB;AACH,GAFD;;AAIA,QAAMwF,kBAAkB,GAAIxF,IAAD,IAAU;AACjC+B,IAAAA,iBAAiB,CAAC/B,IAAD,CAAjB;AACH,GAFD;;AAIA,QAAMyF,WAAW,GAAG,MAAM;AACtBnE,IAAAA,WAAW,CAAC,KAAD,CAAX;AACAN,IAAAA,cAAc,CAAC,EAAD,CAAd;AACAF,IAAAA,OAAO,CAAC,CAAD,CAAP;AACAwD,IAAAA,gBAAgB,CAAC7D,SAAD,EAAYA,SAAS,CAACkD,MAAtB,EAA8B,EAA9B,EAAkC,CAAlC,CAAhB;AACH,GALD;;AAOA,QAAM+B,aAAa,GAAG,MAAM;AACxBrD,IAAAA,WAAW,CAAC,MAAD,CAAX;AACAlE,IAAAA,YAAY,CAACyE,QAAb,CAAsBtC,UAAtB,EAAkCuC,IAAlC,CAAuCC,QAAQ,IAAI;AAC/C,UAAIC,GAAG,GAAG,EAAV;AACAC,MAAAA,MAAM,CAACC,IAAP,CAAYH,QAAQ,CAACd,IAArB,EAA2BkB,OAA3B,CAAmC,UAASC,GAAT,EAAc;AAC7C,YAAIC,QAAQ,GAAGxE,MAAM,CAACkE,QAAQ,CAACd,IAAT,CAAcmB,GAAd,EAAmBnD,IAApB,CAArB;AACA,YAAIqD,SAAS,GAAG;AACZtD,UAAAA,GAAG,EAAE+C,QAAQ,CAACd,IAAT,CAAcmB,GAAd,EAAmBpD,GADZ;AAEZC,UAAAA,IAAI,EAAEoD,QAFM;AAGZE,UAAAA,OAAO,EAAER,QAAQ,CAACd,IAAT,CAAcmB,GAAd,EAAmBI;AAHhB,SAAhB;AAKAR,QAAAA,GAAG,CAACS,IAAJ,CAASH,SAAT;AACH,OARD;AASA,UAAII,QAAQ,GAAGV,GAAG,CAACW,OAAJ,EAAf;AACAhC,MAAAA,UAAU,CAAC+B,QAAQ,CAAC,CAAD,CAAR,CAAY1D,GAAb,CAAV;;AACA,UAAG0D,QAAQ,CAACE,MAAT,IAAmB,CAAtB,EACA;AACIvC,QAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACAF,QAAAA,aAAa,CAAC,IAAD,CAAb;AACH,OAJD,MAIO;AACHR,QAAAA,YAAY,CAAC+C,QAAD,CAAZ;AACA,YAAIzB,IAAI,GAAG,EAAX;;AACA,aAAI,IAAI4B,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGH,QAAQ,CAACE,MAA5B,EAAoCC,CAAC,EAArC,EAAwC;AACpC5B,UAAAA,IAAI,CAACwB,IAAL,CAAU3D,UAAU,CAAC+D,CAAD,EAAIH,QAAQ,CAACG,CAAD,CAAR,CAAY7D,GAAhB,EAAqB0D,QAAQ,CAACG,CAAD,CAAR,CAAY5D,IAAZ,CAAiB6D,MAAjB,CAAwB,KAAxB,CAArB,CAApB;AACH;;AACDjD,QAAAA,OAAO,CAACoB,IAAD,CAAP;AACA,YAAI8B,SAAS,GAAG,GAAhB;AACA,YAAIC,WAAW,GAAG,CAAlB;;AACA,aAAI,IAAIH,CAAC,GAAK/C,IAAI,GAAGE,WAArB,EAAoC6C,CAAC,GAAK/C,IAAI,GAAGE,WAAR,GAAuBA,WAAhE,EAA8E6C,CAAC,EAA/E,EAAkF;AAC9E,cAAGA,CAAC,GAAGH,QAAQ,CAACE,MAAT,GAAkB,CAAzB,EACA;AACIG,YAAAA,SAAS,GAAGA,SAAS,CAACE,MAAV,CAAiB,CAAjB,EAAoBF,SAAS,CAACH,MAAV,GAAkB,CAAtC,CAAZ;AACA;AACH;;AACDI,UAAAA,WAAW,IAAIN,QAAQ,CAACG,CAAD,CAAR,CAAY7D,GAA3B;AACA+D,UAAAA,SAAS,IAAI,MAAML,QAAQ,CAACG,CAAD,CAAR,CAAY5D,IAAZ,CAAiB6D,MAAjB,CAAwB,aAAxB,CAAN,GAA+C,KAA/C,GAAuDJ,QAAQ,CAACG,CAAD,CAAR,CAAY7D,GAAhF;;AACA,cAAG6D,CAAC,KAAO/C,IAAI,GAAGE,WAAR,GAAuBA,WAAxB,GAAuC,CAAhD,EAAkD;AAC9C+C,YAAAA,SAAS,IAAI,GAAb;AACH;AACJ;;AACDA,QAAAA,SAAS,IAAI,GAAb;AACA7B,QAAAA,OAAO,CAACC,IAAI,CAACC,KAAL,CAAW2B,SAAX,CAAD,CAAP;AACAtC,QAAAA,UAAU,CAACyC,IAAI,CAACC,KAAL,CAAWH,WAAW,GAAGhD,WAAzB,CAAD,CAAV;AACH;AACJ,KA1CD;AA2CH,GA7CD;;AA+CA,QAAM4E,gBAAgB,GAAG,MAAM;AAC3BtD,IAAAA,WAAW,CAAC,OAAD,CAAX;AACH,GAFD;;AAIA,QAAMuD,gBAAgB,GAAG,MAAM;AAC3BvD,IAAAA,WAAW,CAAC,OAAD,CAAX;AACH,GAFD;;AAIA,QAAMiC,gBAAgB,GAAG,CAACY,SAAD,EAAYvB,MAAZ,EAAoBkC,WAApB,EAAiChF,IAAjC,KAA0C;AAC/D,QAAGgF,WAAW,KAAK,CAAC,CAApB,EACA;AACI,UAAI/B,SAAS,GAAG,GAAhB;AACA,UAAIC,WAAW,GAAG,CAAlB;;AACA,WAAI,IAAIH,CAAC,GAAK/C,IAAI,GAAGgF,WAArB,EAAoCjC,CAAC,GAAK/C,IAAI,GAAGgF,WAAR,GAAuBA,WAAhE,EAA8EjC,CAAC,EAA/E,EAAkF;AAC9E,YAAGA,CAAC,GAAGsB,SAAS,CAACvB,MAAV,GAAmB,CAA1B,EACA;AACIG,UAAAA,SAAS,GAAGA,SAAS,CAACE,MAAV,CAAiB,CAAjB,EAAoBF,SAAS,CAACH,MAAV,GAAkB,CAAtC,CAAZ;AACA;AACH;;AACDI,QAAAA,WAAW,IAAImB,SAAS,CAACtB,CAAD,CAAT,CAAa7D,GAA5B;AACA+D,QAAAA,SAAS,IAAI,MAAMoB,SAAS,CAACtB,CAAD,CAAT,CAAa5D,IAAb,CAAkB6D,MAAlB,CAAyB,aAAzB,CAAN,GAAgD,KAAhD,GAAwDqB,SAAS,CAACtB,CAAD,CAAT,CAAa7D,GAAlF;;AACA,YAAG6D,CAAC,KAAO/C,IAAI,GAAGgF,WAAR,GAAuBA,WAAxB,GAAuC,CAAhD,EAAkD;AAC9C/B,UAAAA,SAAS,IAAI,GAAb;AACH;AACJ;;AACDA,MAAAA,SAAS,IAAI,GAAb;AACA7B,MAAAA,OAAO,CAACC,IAAI,CAACC,KAAL,CAAW2B,SAAX,CAAD,CAAP;AACAtC,MAAAA,UAAU,CAACyC,IAAI,CAACC,KAAL,CAAWH,WAAW,GAAG8B,WAAzB,CAAD,CAAV;AACH,KAnBD,MAmBO;AACH,UAAI/B,SAAS,GAAG,GAAhB;AACA,UAAIC,WAAW,GAAG,CAAlB;;AACA,WAAI,IAAIH,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGD,MAAnB,EAA2BC,CAAC,EAA5B,EAA+B;AAC3BG,QAAAA,WAAW,IAAImB,SAAS,CAACtB,CAAD,CAAT,CAAa7D,GAA5B;AACA+D,QAAAA,SAAS,IAAI,MAAMoB,SAAS,CAACtB,CAAD,CAAT,CAAa5D,IAAb,CAAkB6D,MAAlB,CAAyB,aAAzB,CAAN,GAAgD,KAAhD,GAAwDqB,SAAS,CAACtB,CAAD,CAAT,CAAa7D,GAAlF;;AACA,YAAG6D,CAAC,KAAKD,MAAM,GAAG,CAAlB,EAAoB;AAChBG,UAAAA,SAAS,IAAI,GAAb;AACH;AACJ;;AACDA,MAAAA,SAAS,IAAI,GAAb;AACA7B,MAAAA,OAAO,CAACC,IAAI,CAACC,KAAL,CAAW2B,SAAX,CAAD,CAAP;AACAtC,MAAAA,UAAU,CAACyC,IAAI,CAACC,KAAL,CAAWH,WAAW,GAAGJ,MAAzB,CAAD,CAAV;AACH;AACJ,GAlCD;;AAoCA,MAAImC,IAAI,gBAAI,QAAC,IAAD;AAAM,IAAA,SAAS,MAAf;AAAA,4BACI,QAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE5F,UAAU,GAAG,CAAH,GAAO,EAAhC;AAAoC,MAAA,SAAS,EAAEE,OAAO,CAAC2F,WAAvD;AAAA,6BACA;AAAK,QAAA,KAAK,EAAE;AAACC,UAAAA,OAAO,EAAE,MAAV;AAAkBC,UAAAA,MAAM,EAAE;AAA1B,SAAZ;AAAA,+BACI,QAAC,KAAD;AACI,UAAA,IAAI,EAAEtF,IADV;AAEI,UAAA,IAAI,EAAEE,IAFV;AAGI,UAAA,WAAW,EAAEE,WAHjB;AAII,UAAA,gBAAgB,EAAEoD,gBAJtB;AAKI,UAAA,uBAAuB,EAAEI;AAL7B;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,YADJ,eAYA,QAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAErE,UAAU,GAAG,CAAH,GAAO,EAAhC;AAAA,8BACI;AAAK,QAAA,KAAK,EAAE;AAAC8F,UAAAA,OAAO,EAAE;AAAV,SAAZ;AAAA,+BACI,QAAC,KAAD;AAAO,UAAA,IAAI,EAAEhE;AAAb;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ,eAII,QAAC,IAAD;AAAM,QAAA,SAAS,MAAf;AAAA,gCACI,QAAC,IAAD;AAAM,UAAA,IAAI,MAAV;AAAW,UAAA,EAAE,EAAE7B,aAAa,GAAG,CAAH,GAAO,EAAnC;AAAuC,UAAA,KAAK,EAAE;AAAC8F,YAAAA,MAAM,EAAE;AAAT,WAA9C;AAAA,iCACI;AAAK,YAAA,KAAK,EAAE;AAAC3G,cAAAA,YAAY,EAAE,MAAf;AAAuBC,cAAAA,WAAW,EAAE,MAApC;AAA4CF,cAAAA,UAAU,EAAE,MAAxD;AAAgE6G,cAAAA,KAAK,EAAE;AAAvE,aAAZ;AAAA,mCACI,QAAC,OAAD;AAAS,cAAA,KAAK,EAAE,oBAAhB;AAAsC,cAAA,GAAG,EAAE3E;AAA3C;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBADJ,eAMI,QAAC,IAAD;AAAM,UAAA,IAAI,MAAV;AAAW,UAAA,EAAE,EAAEpB,aAAa,GAAG,CAAH,GAAO,EAAnC;AAAA,iCACI;AAAK,YAAA,KAAK,EAAE;AAACb,cAAAA,YAAY,EAAE,MAAf;AAAuBC,cAAAA,WAAW,EAAE,MAApC;AAA4CF,cAAAA,UAAU,EAAE,MAAxD;AAAgE6G,cAAAA,KAAK,EAAE;AAAvE,aAAZ;AAAA,mCACI,QAAC,OAAD;AAAS,cAAA,KAAK,EAAE,yBAAhB;AAA2C,cAAA,GAAG,EAAEzE;AAAhD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBANJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAZA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAZ;;AA+BA,MAAGW,QAAQ,KAAK,OAAhB,EAAwB;AACpB0D,IAAAA,IAAI,gBAAI;AAAK,MAAA,KAAK,EAAE;AAACE,QAAAA,OAAO,EAAE,MAAV;AAAkBC,QAAAA,MAAM,EAAE,MAA1B;AAAkCC,QAAAA,KAAK,EAAE;AAAzC,OAAZ;AAAA,6BACI,QAAC,KAAD;AACI,QAAA,IAAI,EAAEvF,IADV;AAEI,QAAA,IAAI,EAAEE,IAFV;AAGI,QAAA,WAAW,EAAEE,WAHjB;AAII,QAAA,gBAAgB,EAAEoD,gBAJtB;AAKI,QAAA,uBAAuB,EAAEI;AAL7B;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAAR;AASH,GAVD,MAUO,IAAInC,QAAQ,KAAK,OAAjB,EAAyB;AAC5B0D,IAAAA,IAAI,gBAAI;AAAK,MAAA,KAAK,EAAE;AAACE,QAAAA,OAAO,EAAE,MAAV;AAAkBC,QAAAA,MAAM,EAAE,MAA1B;AAAkCC,QAAAA,KAAK,EAAE;AAAzC,OAAZ;AAAA,6BACI,QAAC,KAAD;AAAO,QAAA,IAAI,EAAElE;AAAb;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAAR;AAGH;;AAED,sBACI;AAAA,4BACI,QAAC,WAAD;AACI,MAAA,IAAI,EAAEM;AADV;AAAA;AAAA;AAAA;AAAA,YADJ,eAII,QAAC,MAAD;AACI,MAAA,WAAW,EAAE9B,WADjB;AAEI,MAAA,UAAU,EAAES,UAFhB;AAGI,MAAA,aAAa,EAAEC,aAHnB;AAII,MAAA,iBAAiB,EAAEwD;AAJvB;AAAA;AAAA;AAAA;AAAA,YAJJ,eAUI,QAAC,WAAD;AACI,MAAA,QAAQ,EAAErD,QADd;AAEI,MAAA,eAAe,EAAEuD,eAFrB;AAGI,MAAA,gBAAgB,EAAEjD,gBAHtB;AAII,MAAA,cAAc,EAAGG,cAJrB;AAKI,MAAA,oBAAoB,EAAEyD,oBAL1B;AAMI,MAAA,kBAAkB,EAAEC,kBANxB;AAOI,MAAA,WAAW,EAAEC;AAPjB;AAAA;AAAA;AAAA;AAAA,YAVJ,eAmBI,QAAC,OAAD;AACI,MAAA,gBAAgB,EAAEE,gBADtB;AAEI,MAAA,gBAAgB,EAAEC;AAFtB;AAAA;AAAA;AAAA;AAAA,YAnBJ,eAuBI;AAAK,MAAA,SAAS,EAAExF,OAAO,CAAChB,OAAxB;AAAA,6BACI,QAAC,IAAD;AAAA,gCACI,QAAC,OAAD;AACI,UAAA,WAAW,EAAEoB,WADjB;AAEI,UAAA,cAAc,EAAEW,cAFpB;AAGI,UAAA,mBAAmB,EAAEwD,mBAHzB;AAII,UAAA,aAAa,EAAEe;AAJnB;AAAA;AAAA;AAAA;AAAA,gBADJ,EAOKI,IAPL,eAQI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,gBARJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAvBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAsCH,CAnUD;;GAAM7F,S;UACiBlB,a,EACGA,a,EAENG,S;;;KAJde,S;AAqUN,eAAeA,SAAf","sourcesContent":["import { useState, useEffect } from 'react';\nimport HeartSerivce from './../services/HeartRateService';\nimport SideBar from '../components/Navigation/SideBar';\nimport { makeStyles } from '@material-ui/core';\nimport Grid from '@material-ui/core/Grid';\nimport Cookies from 'universal-cookie';\nimport BPMCard from './../components/Dashboard/BPMCard';\nimport Table from './../components/Dashboard/Table';\nimport Graph from './../components/Dashboard/Graph';\nimport NoData from './../components/Dashboard/NoData';\nimport moment from 'moment';\nimport Heading from './../components/Dashboard/Heading';\nimport Footer from './../components/Navigation/Footer';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport SelectDates from './../components/Dashboard/SelectDates';\nimport LoadingPage from './../components/Navigation/Loading';\n\n\nconst useStyles = makeStyles((theme) => ({\n    content: {\n        paddingTop: '25px',\n        paddingRight: '25px',\n        paddingLeft: '110px',\n        '@media (min-width: 900px)': {\n            paddingLeft: '265px',\n          }, \n    },\n    welcome: {\n        textAlign: 'left',\n        fontWeight: '300',\n        fontSize: '28px'\n    },\n    output: {\n        textAlign: 'left',\n        fontWeight: '100',\n        fontSize: '22px'\n    },\n}));\n\nfunction createData(unNum, bpm, date) {\n    return {unNum, bpm, date };\n}\n\nconst Dashboard = () => {\n    const matchWidth = useMediaQuery('(min-width:1150px)');\n    const matchWidthSec = useMediaQuery('(min-width:600px)');\n\n    const classes = useStyles();\n    const cookies = new Cookies();\n    const curAppleId = cookies.get('currAppleId');\n    const displayName = cookies.get('displayName');\n    const [heartData, setHeartData] = useState([]);\n    const [rows, setRows] = useState([]);\n    const [page, setPage] = useState(0);\n    const [rowsPerPage, setRowsPerPage] = useState(10);\n    const [openNoData, setOpenNoData] = useState(false);\n    const [datesButtonDis, setDatesButtonDis] = useState(false);\n    const [openDate, setOpenDate] = useState(false);\n    const [avgRate, setAvgRate] = useState(0);\n    const [lastRec, setLastRec] = useState(0);\n    const [selectedDateFrom, setSelectedDateFrom] = useState(new Date());\n    const [selectedDateTo, setSelectedDateTo] = useState(new Date());\n    const [data, setData] = useState(JSON.parse(\"{}\"));\n    const [viewData, setViewData] = useState('full')\n    const [isLoadingPage, setIsLoadingPage] = useState(false);\n\n    if(cookies.get('currAppleId') === undefined){\n        window.location.href = '/'\n    }\n\n\n    useEffect(() => {\n        setIsLoadingPage(true)\n        HeartSerivce.getUsers(curAppleId).then(response => {\n            let arr = [];\n            Object.keys(response.data).forEach(function(key) {\n                let currDate = moment(response.data[key].date);\n                let HeartRate = {\n                    bpm: response.data[key].bpm,\n                    date: currDate,\n                    user_id: response.data[key].userid\n                }\n                arr.push(HeartRate);\n            });\n            let arrTable = arr.reverse();\n            if(arrTable.length <= 0)\n            {\n                setDatesButtonDis(true);\n                setOpenNoData(true);\n            } else {\n                setLastRec(arrTable[0].bpm);\n                setHeartData(arrTable);\n                let data = [];\n                for(let i = 0; i < arrTable.length; i++){\n                    data.push(createData(i, arrTable[i].bpm, arrTable[i].date.format('lll')));\n                }\n                setRows(data);\n                let chartdata = \"{\";\n                let currAveRate = 0;\n                for(let i = ((page * rowsPerPage)); i < ((page * rowsPerPage) + rowsPerPage); i++){\n                    if(i > arrTable.length - 1)\n                    {\n                        chartdata = chartdata.substr(0, chartdata.length -1);\n                        break; \n                    }\n                    currAveRate += arrTable[i].bpm;\n                    chartdata += '\"' + arrTable[i].date.format('MMM D h:m.s') + '\": ' + arrTable[i].bpm;\n                    if(i !== ((page * rowsPerPage) + rowsPerPage) - 1){\n                        chartdata += \",\";\n                    }\n                }\n                chartdata += \"}\"\n                setData(JSON.parse(chartdata));\n                setAvgRate(Math.round(currAveRate / rowsPerPage));\n            }\n        })\n        setIsLoadingPage(false);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n        generteGraphData(heartData, rows.length, rowsPerPage, newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(+event.target.value);\n        setPage(0);\n        //updateGraph(0, +event.target.value, heartData);\n        generteGraphData(heartData, rows.length, +event.target.value, page);\n    };\n\n    const handleCloseNoData = () => {\n        setOpenNoData(false);\n    };\n\n    const handleClickOpenDate = () => {\n        setOpenDate(true);\n    };\n\n    const handleCloseDate = () => {\n        let dateFrom = moment(selectedDateFrom);\n        let dateTo = moment(selectedDateTo);\n        if(dateFrom.isAfter(dateTo) || dateTo.isBefore(dateFrom)){\n            alert(\"The date start must not be after the end date or the end date must not be before the start date!\");\n        } else {\n            setOpenDate(false);\n            let tableData = [];\n            let chartData = \"{\";\n            let heartRates = 0;\n            let numRates = 0;\n            for(let i = 0; i < heartData.length; i++){\n                let currDate = heartData[i].date;\n                if(currDate.isAfter(dateFrom) && currDate.isBefore(dateTo)){\n                    heartRates += heartData[i].bpm;\n                    numRates++;\n                    tableData.push(createData(i, heartData[i].bpm, heartData[i].date.format('lll')));\n                    chartData += '\"' + heartData[i].date.format('MMM D, YYYY h:m.s') + '\": ' + heartData[i].bpm + ',';\n                }\n            }\n            if (numRates > 0) {\n                setAvgRate(Math.round(heartRates / numRates))\n                chartData = chartData.substring(0, chartData.length - 1)\n                chartData += \"}\"\n                setRows(tableData);\n                setPage(0);\n                setRowsPerPage(-1);\n                setData(JSON.parse(chartData));\n            } else {\n                setOpenDate(true);\n                alert(\"No data found between those dates\");\n            }\n        }\n    };\n\n    const handleDateChangeFrom = (date) => {\n        setSelectedDateFrom(date);\n    };\n\n    const handleDateChangeTo = (date) => {\n        setSelectedDateTo(date);\n    };\n\n    const handleReset = () => {\n        setOpenDate(false);\n        setRowsPerPage(10)\n        setPage(0);\n        generteGraphData(heartData, heartData.length, 10, 0);\n    }\n\n    const handelRefresh = () => {\n        setViewData(\"full\")\n        HeartSerivce.getUsers(curAppleId).then(response => {\n            let arr = [];\n            Object.keys(response.data).forEach(function(key) {\n                let currDate = moment(response.data[key].date);\n                let HeartRate = {\n                    bpm: response.data[key].bpm,\n                    date: currDate,\n                    user_id: response.data[key].userid\n                }\n                arr.push(HeartRate);\n            });\n            let arrTable = arr.reverse();\n            setLastRec(arrTable[0].bpm);\n            if(arrTable.length <= 0)\n            {\n                setDatesButtonDis(true);\n                setOpenNoData(true);\n            } else {\n                setHeartData(arrTable);\n                let data = [];\n                for(let i = 0; i < arrTable.length; i++){\n                    data.push(createData(i, arrTable[i].bpm, arrTable[i].date.format('lll')));\n                }\n                setRows(data);\n                let chartdata = \"{\";\n                let currAveRate = 0;\n                for(let i = ((page * rowsPerPage)); i < ((page * rowsPerPage) + rowsPerPage); i++){\n                    if(i > arrTable.length - 1)\n                    {\n                        chartdata = chartdata.substr(0, chartdata.length -1);\n                        break; \n                    }\n                    currAveRate += arrTable[i].bpm;\n                    chartdata += '\"' + arrTable[i].date.format('MMM D h:m.s') + '\": ' + arrTable[i].bpm;\n                    if(i !== ((page * rowsPerPage) + rowsPerPage) - 1){\n                        chartdata += \",\";\n                    }\n                }\n                chartdata += \"}\"\n                setData(JSON.parse(chartdata));\n                setAvgRate(Math.round(currAveRate / rowsPerPage));\n            }\n        })\n    }\n\n    const handleTableClick = () => {\n        setViewData(\"table\");\n    }\n\n    const handleGraphClick = () => {\n        setViewData(\"graph\");\n    }\n\n    const generteGraphData = (tableData, length, numElements, page) => {\n        if(numElements !== -1)\n        {\n            let chartdata = \"{\";\n            let currAveRate = 0;\n            for(let i = ((page * numElements)); i < ((page * numElements) + numElements); i++){\n                if(i > tableData.length - 1)\n                {\n                    chartdata = chartdata.substr(0, chartdata.length -1);\n                    break; \n                }\n                currAveRate += tableData[i].bpm;\n                chartdata += '\"' + tableData[i].date.format('MMM D h:m.s') + '\": ' + tableData[i].bpm;\n                if(i !== ((page * numElements) + numElements) - 1){\n                    chartdata += \",\";\n                }\n            }\n            chartdata += \"}\"\n            setData(JSON.parse(chartdata));\n            setAvgRate(Math.round(currAveRate / numElements));\n        } else {\n            let chartdata = \"{\";\n            let currAveRate = 0;\n            for(let i = 0; i < length; i++){\n                currAveRate += tableData[i].bpm;\n                chartdata += '\"' + tableData[i].date.format('MMM D h:m.s') + '\": ' + tableData[i].bpm;\n                if(i !== length - 1){\n                    chartdata += \",\";\n                }\n            }\n            chartdata += \"}\"\n            setData(JSON.parse(chartdata));\n            setAvgRate(Math.round(currAveRate / length));\n        }\n    }\n\n    var body =  <Grid container>\n                    <Grid item sm={matchWidth ? 6 : 12} className={classes.tableHeight}>\n                    <div style={{padding: '10px', height: '73vh'}}>\n                        <Table\n                            rows={rows}\n                            page={page}\n                            rowsPerPage={rowsPerPage}\n                            handleChangePage={handleChangePage}\n                            handleChangeRowsPerPage={handleChangeRowsPerPage}\n                        />\n                    </div>\n                </Grid>\n                <Grid item sm={matchWidth ? 6 : 12}>\n                    <div style={{padding: '10px'}} >\n                        <Graph data={data}/>\n                    </div>\n                    <Grid container>\n                        <Grid item sm={matchWidthSec ? 6 : 12} style={{height: '36vh'}}>\n                            <div style={{paddingRight: '10px', paddingLeft: '10px', paddingTop: '10px', width: '100%'}}>\n                                <BPMCard title={\"Average Heart Rate\"} bpm={avgRate}/>\n                            </div>\n                        </Grid>\n                        <Grid item sm={matchWidthSec ? 6 : 12}>\n                            <div style={{paddingRight: '10px', paddingLeft: '10px', paddingTop: '10px', width: '100%'}}>\n                                <BPMCard title={\"Last Recoded Heart Rate\"} bpm={lastRec}/>\n                            </div>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>;\n\n    if(viewData === \"table\"){\n        body =  <div style={{padding: '15px', height: '78vh', width: '100%'}}>\n                    <Table \n                        rows={rows}\n                        page={page}\n                        rowsPerPage={rowsPerPage}\n                        handleChangePage={handleChangePage}\n                        handleChangeRowsPerPage={handleChangeRowsPerPage}\n                    />\n                </div>\n    } else if (viewData === \"graph\"){\n        body =  <div style={{padding: '15px', height: '78vh', width: '100%'}}>\n                    <Graph data={data}/> \n                </div>\n    }\n\n    return (\n        <div>\n            <LoadingPage \n                open={isLoadingPage}\n            />\n            <NoData \n                displayName={displayName}\n                openNoData={openNoData}\n                setOpenNoData={setOpenNoData}\n                handleCloseNoData={handleCloseNoData}\n            />\n            <SelectDates\n                openDate={openDate}\n                handleCloseDate={handleCloseDate}\n                selectedDateFrom={selectedDateFrom}\n                selectedDateTo= {selectedDateTo}\n                handleDateChangeFrom={handleDateChangeFrom}\n                handleDateChangeTo={handleDateChangeTo}\n                handleReset={handleReset}\n            />\n            <SideBar \n                handleTableClick={handleTableClick}\n                handleGraphClick={handleGraphClick}\n            />\n            <div className={classes.content}>\n                <Grid>\n                    <Heading \n                        displayName={displayName}\n                        datesButtonDis={datesButtonDis}\n                        handleClickOpenDate={handleClickOpenDate}\n                        handelRefresh={handelRefresh}\n                    />\n                    {body}\n                    <Footer/>\n                </Grid>\n            </div>\n        </div>\n    )\n}\n\nexport default Dashboard\n"]},"metadata":{},"sourceType":"module"}