{"ast":null,"code":"var AWS = require('../core');\n\nvar rdsutil = {\n  /**\n    * @api private\n    */\n  setupRequestListeners: function setupRequestListeners(service, request, crossRegionOperations) {\n    if (crossRegionOperations.indexOf(request.operation) !== -1 && request.params.SourceRegion) {\n      request.params = AWS.util.copy(request.params);\n\n      if (request.params.PreSignedUrl || request.params.SourceRegion === service.config.region) {\n        delete request.params.SourceRegion;\n      } else {\n        var doesParamValidation = !!service.config.paramValidation; // remove the validate parameters listener so we can re-add it after we build the URL\n\n        if (doesParamValidation) {\n          request.removeListener('validate', AWS.EventListeners.Core.VALIDATE_PARAMETERS);\n        }\n\n        request.onAsync('validate', rdsutil.buildCrossRegionPresignedUrl);\n\n        if (doesParamValidation) {\n          request.addListener('validate', AWS.EventListeners.Core.VALIDATE_PARAMETERS);\n        }\n      }\n    }\n  },\n\n  /**\n   * @api private\n   */\n  buildCrossRegionPresignedUrl: function buildCrossRegionPresignedUrl(req, done) {\n    var config = AWS.util.copy(req.service.config);\n    config.region = req.params.SourceRegion;\n    delete req.params.SourceRegion;\n    delete config.endpoint; // relevant params for the operation will already be in req.params\n\n    delete config.params;\n    config.signatureVersion = 'v4';\n    var destinationRegion = req.service.config.region;\n    var svc = new req.service.constructor(config);\n    var newReq = svc[req.operation](AWS.util.copy(req.params));\n    newReq.on('build', function addDestinationRegionParam(request) {\n      var httpRequest = request.httpRequest;\n      httpRequest.params.DestinationRegion = destinationRegion;\n      httpRequest.body = AWS.util.queryParamsToString(httpRequest.params);\n    });\n    newReq.presign(function (err, url) {\n      if (err) done(err);else {\n        req.params.PreSignedUrl = url;\n        done();\n      }\n    });\n  }\n};\n/**\n * @api private\n */\n\nmodule.exports = rdsutil;","map":{"version":3,"sources":["/Users/bryceschmisseur/Desktop/frontend-fire/node_modules/aws-sdk/lib/services/rdsutil.js"],"names":["AWS","require","rdsutil","setupRequestListeners","service","request","crossRegionOperations","indexOf","operation","params","SourceRegion","util","copy","PreSignedUrl","config","region","doesParamValidation","paramValidation","removeListener","EventListeners","Core","VALIDATE_PARAMETERS","onAsync","buildCrossRegionPresignedUrl","addListener","req","done","endpoint","signatureVersion","destinationRegion","svc","constructor","newReq","on","addDestinationRegionParam","httpRequest","DestinationRegion","body","queryParamsToString","presign","err","url","module","exports"],"mappings":"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","sourcesContent":["var AWS = require('../core');\n\nvar rdsutil = {\n  /**\n    * @api private\n    */\n   setupRequestListeners: function setupRequestListeners(service, request, crossRegionOperations) {\n    if (crossRegionOperations.indexOf(request.operation) !== -1 &&\n        request.params.SourceRegion) {\n      request.params = AWS.util.copy(request.params);\n      if (request.params.PreSignedUrl ||\n          request.params.SourceRegion === service.config.region) {\n        delete request.params.SourceRegion;\n      } else {\n        var doesParamValidation = !!service.config.paramValidation;\n        // remove the validate parameters listener so we can re-add it after we build the URL\n        if (doesParamValidation) {\n          request.removeListener('validate', AWS.EventListeners.Core.VALIDATE_PARAMETERS);\n        }\n        request.onAsync('validate', rdsutil.buildCrossRegionPresignedUrl);\n        if (doesParamValidation) {\n          request.addListener('validate', AWS.EventListeners.Core.VALIDATE_PARAMETERS);\n        }\n      }\n    }\n  },\n\n  /**\n   * @api private\n   */\n  buildCrossRegionPresignedUrl: function buildCrossRegionPresignedUrl(req, done) {\n    var config = AWS.util.copy(req.service.config);\n    config.region = req.params.SourceRegion;\n    delete req.params.SourceRegion;\n    delete config.endpoint;\n    // relevant params for the operation will already be in req.params\n    delete config.params;\n    config.signatureVersion = 'v4';\n    var destinationRegion = req.service.config.region;\n\n    var svc = new req.service.constructor(config);\n    var newReq = svc[req.operation](AWS.util.copy(req.params));\n    newReq.on('build', function addDestinationRegionParam(request) {\n      var httpRequest = request.httpRequest;\n      httpRequest.params.DestinationRegion = destinationRegion;\n      httpRequest.body = AWS.util.queryParamsToString(httpRequest.params);\n    });\n    newReq.presign(function(err, url) {\n      if (err) done(err);\n      else {\n        req.params.PreSignedUrl = url;\n        done();\n      }\n    });\n  }\n};\n\n/**\n * @api private\n */\nmodule.exports = rdsutil;\n"]},"metadata":{},"sourceType":"script"}