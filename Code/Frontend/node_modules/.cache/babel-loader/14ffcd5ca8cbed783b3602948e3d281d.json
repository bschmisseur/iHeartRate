{"ast":null,"code":"import * as cookie from 'cookie';\nexport function hasDocumentCookie() {\n  // Can we get/set cookies on document.cookie?\n  return typeof document === 'object' && typeof document.cookie === 'string';\n}\nexport function cleanCookies() {\n  document.cookie.split(';').forEach(function (c) {\n    document.cookie = c.replace(/^ +/, '').replace(/=.*/, '=;expires=' + new Date().toUTCString() + ';path=/');\n  });\n}\nexport function parseCookies(cookies, options) {\n  if (typeof cookies === 'string') {\n    return cookie.parse(cookies, options);\n  } else if (typeof cookies === 'object' && cookies !== null) {\n    return cookies;\n  } else {\n    return {};\n  }\n}\nexport function isParsingCookie(value, doNotParse) {\n  if (typeof doNotParse === 'undefined') {\n    // We guess if the cookie start with { or [, it has been serialized\n    doNotParse = !value || value[0] !== '{' && value[0] !== '[' && value[0] !== '\"';\n  }\n\n  return !doNotParse;\n}\nexport function readCookie(value, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var cleanValue = cleanupCookieValue(value);\n\n  if (isParsingCookie(cleanValue, options.doNotParse)) {\n    try {\n      return JSON.parse(cleanValue);\n    } catch (e) {// At least we tried\n    }\n  } // Ignore clean value if we failed the deserialization\n  // It is not relevant anymore to trim those values\n\n\n  return value;\n}\n\nfunction cleanupCookieValue(value) {\n  // express prepend j: before serializing a cookie\n  if (value && value[0] === 'j' && value[1] === ':') {\n    return value.substr(2);\n  }\n\n  return value;\n}","map":{"version":3,"sources":["/Users/bryceschmisseur/Documents/CST-452/IHeartRate/frontend-fire/node_modules/universal-cookie/es6/utils.js"],"names":["cookie","hasDocumentCookie","document","cleanCookies","split","forEach","c","replace","Date","toUTCString","parseCookies","cookies","options","parse","isParsingCookie","value","doNotParse","readCookie","cleanValue","cleanupCookieValue","JSON","e","substr"],"mappings":"AAAA,OAAO,KAAKA,MAAZ,MAAwB,QAAxB;AACA,OAAO,SAASC,iBAAT,GAA6B;AAChC;AACA,SAAO,OAAOC,QAAP,KAAoB,QAApB,IAAgC,OAAOA,QAAQ,CAACF,MAAhB,KAA2B,QAAlE;AACH;AACD,OAAO,SAASG,YAAT,GAAwB;AAC3BD,EAAAA,QAAQ,CAACF,MAAT,CAAgBI,KAAhB,CAAsB,GAAtB,EAA2BC,OAA3B,CAAmC,UAAUC,CAAV,EAAa;AAC5CJ,IAAAA,QAAQ,CAACF,MAAT,GAAkBM,CAAC,CACdC,OADa,CACL,KADK,EACE,EADF,EAEbA,OAFa,CAEL,KAFK,EAEE,eAAe,IAAIC,IAAJ,GAAWC,WAAX,EAAf,GAA0C,SAF5C,CAAlB;AAGH,GAJD;AAKH;AACD,OAAO,SAASC,YAAT,CAAsBC,OAAtB,EAA+BC,OAA/B,EAAwC;AAC3C,MAAI,OAAOD,OAAP,KAAmB,QAAvB,EAAiC;AAC7B,WAAOX,MAAM,CAACa,KAAP,CAAaF,OAAb,EAAsBC,OAAtB,CAAP;AACH,GAFD,MAGK,IAAI,OAAOD,OAAP,KAAmB,QAAnB,IAA+BA,OAAO,KAAK,IAA/C,EAAqD;AACtD,WAAOA,OAAP;AACH,GAFI,MAGA;AACD,WAAO,EAAP;AACH;AACJ;AACD,OAAO,SAASG,eAAT,CAAyBC,KAAzB,EAAgCC,UAAhC,EAA4C;AAC/C,MAAI,OAAOA,UAAP,KAAsB,WAA1B,EAAuC;AACnC;AACAA,IAAAA,UAAU,GACN,CAACD,KAAD,IAAWA,KAAK,CAAC,CAAD,CAAL,KAAa,GAAb,IAAoBA,KAAK,CAAC,CAAD,CAAL,KAAa,GAAjC,IAAwCA,KAAK,CAAC,CAAD,CAAL,KAAa,GADpE;AAEH;;AACD,SAAO,CAACC,UAAR;AACH;AACD,OAAO,SAASC,UAAT,CAAoBF,KAApB,EAA2BH,OAA3B,EAAoC;AACvC,MAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;AAAEA,IAAAA,OAAO,GAAG,EAAV;AAAe;;AACzC,MAAIM,UAAU,GAAGC,kBAAkB,CAACJ,KAAD,CAAnC;;AACA,MAAID,eAAe,CAACI,UAAD,EAAaN,OAAO,CAACI,UAArB,CAAnB,EAAqD;AACjD,QAAI;AACA,aAAOI,IAAI,CAACP,KAAL,CAAWK,UAAX,CAAP;AACH,KAFD,CAGA,OAAOG,CAAP,EAAU,CACN;AACH;AACJ,GAVsC,CAWvC;AACA;;;AACA,SAAON,KAAP;AACH;;AACD,SAASI,kBAAT,CAA4BJ,KAA5B,EAAmC;AAC/B;AACA,MAAIA,KAAK,IAAIA,KAAK,CAAC,CAAD,CAAL,KAAa,GAAtB,IAA6BA,KAAK,CAAC,CAAD,CAAL,KAAa,GAA9C,EAAmD;AAC/C,WAAOA,KAAK,CAACO,MAAN,CAAa,CAAb,CAAP;AACH;;AACD,SAAOP,KAAP;AACH","sourcesContent":["import * as cookie from 'cookie';\r\nexport function hasDocumentCookie() {\r\n    // Can we get/set cookies on document.cookie?\r\n    return typeof document === 'object' && typeof document.cookie === 'string';\r\n}\r\nexport function cleanCookies() {\r\n    document.cookie.split(';').forEach(function (c) {\r\n        document.cookie = c\r\n            .replace(/^ +/, '')\r\n            .replace(/=.*/, '=;expires=' + new Date().toUTCString() + ';path=/');\r\n    });\r\n}\r\nexport function parseCookies(cookies, options) {\r\n    if (typeof cookies === 'string') {\r\n        return cookie.parse(cookies, options);\r\n    }\r\n    else if (typeof cookies === 'object' && cookies !== null) {\r\n        return cookies;\r\n    }\r\n    else {\r\n        return {};\r\n    }\r\n}\r\nexport function isParsingCookie(value, doNotParse) {\r\n    if (typeof doNotParse === 'undefined') {\r\n        // We guess if the cookie start with { or [, it has been serialized\r\n        doNotParse =\r\n            !value || (value[0] !== '{' && value[0] !== '[' && value[0] !== '\"');\r\n    }\r\n    return !doNotParse;\r\n}\r\nexport function readCookie(value, options) {\r\n    if (options === void 0) { options = {}; }\r\n    var cleanValue = cleanupCookieValue(value);\r\n    if (isParsingCookie(cleanValue, options.doNotParse)) {\r\n        try {\r\n            return JSON.parse(cleanValue);\r\n        }\r\n        catch (e) {\r\n            // At least we tried\r\n        }\r\n    }\r\n    // Ignore clean value if we failed the deserialization\r\n    // It is not relevant anymore to trim those values\r\n    return value;\r\n}\r\nfunction cleanupCookieValue(value) {\r\n    // express prepend j: before serializing a cookie\r\n    if (value && value[0] === 'j' && value[1] === ':') {\r\n        return value.substr(2);\r\n    }\r\n    return value;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}