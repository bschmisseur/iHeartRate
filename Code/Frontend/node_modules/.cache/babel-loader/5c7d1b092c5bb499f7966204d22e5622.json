{"ast":null,"code":"import toDate from \"../toDate/index.js\";\nimport isValid from \"../isValid/index.js\";\nimport addLeadingZeros from \"../_lib/addLeadingZeros/index.js\";\n/**\n * @name formatISO\n * @category Common Helpers\n * @summary Format the date according to the ISO 8601 standard (http://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/viewer.htm#a003169814.htm).\n *\n * @description\n * Return the formatted date string in ISO 8601 format. Options may be passed to control the parts and notations of the date.\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {'extended'|'basic'} [options.format='extended'] - if 'basic', hide delimiters between date and time values.\n * @param {'complete'|'date'|'time'} [options.representation='complete'] - format date, time with time zone, or both.\n * @returns {String} the formatted date string\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.format` must be 'extended' or 'basic'\n * @throws {RangeError} `options.represenation` must be 'date', 'time' or 'complete'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format (UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52))\n * //=> '2019-09-18T19:00:52Z'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601, short format (UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { format: 'basic' })\n * //=> '20190918T190052'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format, date only:\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'date' })\n * //=> '2019-09-18'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format, time only (UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'time' })\n * //=> '19:00:52Z'\n */\n\nexport default function formatISO(dirtyDate, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError(\"1 argument required, but only \".concat(arguments.length, \" present\"));\n  }\n\n  var originalDate = toDate(dirtyDate);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError('Invalid time value');\n  }\n\n  var options = dirtyOptions || {};\n  var format = options.format == null ? 'extended' : String(options.format);\n  var representation = options.representation == null ? 'complete' : String(options.representation);\n\n  if (format !== 'extended' && format !== 'basic') {\n    throw new RangeError(\"format must be 'extended' or 'basic'\");\n  }\n\n  if (representation !== 'date' && representation !== 'time' && representation !== 'complete') {\n    throw new RangeError(\"representation must be 'date', 'time', or 'complete'\");\n  }\n\n  var result = '';\n  var tzOffset = '';\n  var dateDelimiter = format === 'extended' ? '-' : '';\n  var timeDelimiter = format === 'extended' ? ':' : ''; // Representation is either 'date' or 'complete'\n\n  if (representation !== 'time') {\n    var day = addLeadingZeros(originalDate.getDate(), 2);\n    var month = addLeadingZeros(originalDate.getMonth() + 1, 2);\n    var year = addLeadingZeros(originalDate.getFullYear(), 4); // yyyyMMdd or yyyy-MM-dd.\n\n    result = \"\".concat(year).concat(dateDelimiter).concat(month).concat(dateDelimiter).concat(day);\n  } // Representation is either 'time' or 'complete'\n\n\n  if (representation !== 'date') {\n    // Add the timezone.\n    var offset = originalDate.getTimezoneOffset();\n\n    if (offset !== 0) {\n      var absoluteOffset = Math.abs(offset);\n      var hourOffset = addLeadingZeros(Math.floor(absoluteOffset / 60), 2);\n      var minuteOffset = addLeadingZeros(absoluteOffset % 60, 2); // If less than 0, the sign is +, because it is ahead of time.\n\n      var sign = offset < 0 ? '+' : '-';\n      tzOffset = \"\".concat(sign).concat(hourOffset, \":\").concat(minuteOffset);\n    } else {\n      tzOffset = 'Z';\n    }\n\n    var hour = addLeadingZeros(originalDate.getHours(), 2);\n    var minute = addLeadingZeros(originalDate.getMinutes(), 2);\n    var second = addLeadingZeros(originalDate.getSeconds(), 2); // If there's also date, separate it with time with 'T'\n\n    var separator = result === '' ? '' : 'T'; // Creates a time string consisting of hour, minute, and second, separated by delimiters, if defined.\n\n    var time = [hour, minute, second].join(timeDelimiter); // HHmmss or HH:mm:ss.\n\n    result = \"\".concat(result).concat(separator).concat(time).concat(tzOffset);\n  }\n\n  return result;\n}","map":{"version":3,"sources":["/Users/bryceschmisseur/Desktop/frontend-fire/node_modules/date-fns/esm/formatISO/index.js"],"names":["toDate","isValid","addLeadingZeros","formatISO","dirtyDate","dirtyOptions","arguments","length","TypeError","concat","originalDate","RangeError","options","format","String","representation","result","tzOffset","dateDelimiter","timeDelimiter","day","getDate","month","getMonth","year","getFullYear","offset","getTimezoneOffset","absoluteOffset","Math","abs","hourOffset","floor","minuteOffset","sign","hour","getHours","minute","getMinutes","second","getSeconds","separator","time","join"],"mappings":"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","sourcesContent":["import toDate from \"../toDate/index.js\";\nimport isValid from \"../isValid/index.js\";\nimport addLeadingZeros from \"../_lib/addLeadingZeros/index.js\";\n/**\n * @name formatISO\n * @category Common Helpers\n * @summary Format the date according to the ISO 8601 standard (http://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/viewer.htm#a003169814.htm).\n *\n * @description\n * Return the formatted date string in ISO 8601 format. Options may be passed to control the parts and notations of the date.\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {'extended'|'basic'} [options.format='extended'] - if 'basic', hide delimiters between date and time values.\n * @param {'complete'|'date'|'time'} [options.representation='complete'] - format date, time with time zone, or both.\n * @returns {String} the formatted date string\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.format` must be 'extended' or 'basic'\n * @throws {RangeError} `options.represenation` must be 'date', 'time' or 'complete'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format (UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52))\n * //=> '2019-09-18T19:00:52Z'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601, short format (UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { format: 'basic' })\n * //=> '20190918T190052'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format, date only:\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'date' })\n * //=> '2019-09-18'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format, time only (UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'time' })\n * //=> '19:00:52Z'\n */\n\nexport default function formatISO(dirtyDate, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError(\"1 argument required, but only \".concat(arguments.length, \" present\"));\n  }\n\n  var originalDate = toDate(dirtyDate);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError('Invalid time value');\n  }\n\n  var options = dirtyOptions || {};\n  var format = options.format == null ? 'extended' : String(options.format);\n  var representation = options.representation == null ? 'complete' : String(options.representation);\n\n  if (format !== 'extended' && format !== 'basic') {\n    throw new RangeError(\"format must be 'extended' or 'basic'\");\n  }\n\n  if (representation !== 'date' && representation !== 'time' && representation !== 'complete') {\n    throw new RangeError(\"representation must be 'date', 'time', or 'complete'\");\n  }\n\n  var result = '';\n  var tzOffset = '';\n  var dateDelimiter = format === 'extended' ? '-' : '';\n  var timeDelimiter = format === 'extended' ? ':' : ''; // Representation is either 'date' or 'complete'\n\n  if (representation !== 'time') {\n    var day = addLeadingZeros(originalDate.getDate(), 2);\n    var month = addLeadingZeros(originalDate.getMonth() + 1, 2);\n    var year = addLeadingZeros(originalDate.getFullYear(), 4); // yyyyMMdd or yyyy-MM-dd.\n\n    result = \"\".concat(year).concat(dateDelimiter).concat(month).concat(dateDelimiter).concat(day);\n  } // Representation is either 'time' or 'complete'\n\n\n  if (representation !== 'date') {\n    // Add the timezone.\n    var offset = originalDate.getTimezoneOffset();\n\n    if (offset !== 0) {\n      var absoluteOffset = Math.abs(offset);\n      var hourOffset = addLeadingZeros(Math.floor(absoluteOffset / 60), 2);\n      var minuteOffset = addLeadingZeros(absoluteOffset % 60, 2); // If less than 0, the sign is +, because it is ahead of time.\n\n      var sign = offset < 0 ? '+' : '-';\n      tzOffset = \"\".concat(sign).concat(hourOffset, \":\").concat(minuteOffset);\n    } else {\n      tzOffset = 'Z';\n    }\n\n    var hour = addLeadingZeros(originalDate.getHours(), 2);\n    var minute = addLeadingZeros(originalDate.getMinutes(), 2);\n    var second = addLeadingZeros(originalDate.getSeconds(), 2); // If there's also date, separate it with time with 'T'\n\n    var separator = result === '' ? '' : 'T'; // Creates a time string consisting of hour, minute, and second, separated by delimiters, if defined.\n\n    var time = [hour, minute, second].join(timeDelimiter); // HHmmss or HH:mm:ss.\n\n    result = \"\".concat(result).concat(separator).concat(time).concat(tzOffset);\n  }\n\n  return result;\n}"]},"metadata":{},"sourceType":"module"}