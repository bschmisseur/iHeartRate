/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { FirebaseApp as FirebaseAppExp } from '@firebase/app-exp';
import { FirebaseApp } from '@firebase/app-types';
import { FirebaseService } from '@firebase/app-types/private';
import { FirebaseAuthInternalName } from '@firebase/auth-interop-types';
import { Provider } from '@firebase/component';
import { AuthTokenProvider } from '../core/AuthTokenProvider';
import { Repo } from '../core/Repo';
import { RepoInfo } from '../core/RepoInfo';
import { Reference } from './Reference';
/**
 * Intersection type that allows the SDK to be used from firebase-exp and
 * firebase v8.
 */
export declare type FirebaseAppLike = FirebaseApp | FirebaseAppExp;
/**
 * Update an existing repo in place to point to a new host/port.
 */
export declare function repoManagerApplyEmulatorSettings(repo: Repo, host: string, port: number): void;
/**
 * This function should only ever be called to CREATE a new database instance.
 */
export declare function repoManagerDatabaseFromApp(app: FirebaseAppLike, authProvider: Provider<FirebaseAuthInternalName>, url?: string, nodeAdmin?: boolean): Database;
/**
 * Remove the repo and make sure it is disconnected.
 *
 */
export declare function repoManagerDeleteRepo(repo: Repo): void;
/**
 * Ensures a repo doesn't already exist and then creates one using the
 * provided app.
 *
 * @param repoInfo The metadata about the Repo
 * @return The Repo object for the specified server / repoName.
 */
export declare function repoManagerCreateRepo(repoInfo: RepoInfo, app: FirebaseAppLike, authTokenProvider: AuthTokenProvider): Repo;
/**
 * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.
 */
export declare function repoManagerForceRestClient(forceRestClient: boolean): void;
/**
 * Class representing a firebase database.
 */
export declare class Database implements FirebaseService {
    private repoInternal_;
    /** Track if the instance has been used (root or repo accessed) */
    private instanceStarted_;
    /** Backing state for root_ */
    private rootInternal_?;
    static readonly ServerValue: {
        TIMESTAMP: {
            '.sv': string;
        };
        increment: (delta: number) => {
            '.sv': {
                increment: number;
            };
        };
    };
    /**
     * The constructor should not be called by users of our public API.
     */
    constructor(repoInternal_: Repo);
    INTERNAL: {
        delete: () => Promise<void>;
    };
    get repo_(): Repo;
    get root_(): Reference;
    get app(): FirebaseApp;
    /**
     * Modify this instance to communicate with the Realtime Database emulator.
     *
     * <p>Note: This method must be called before performing any other operation.
     *
     * @param host the emulator host (ex: localhost)
     * @param port the emulator port (ex: 8080)
     */
    useEmulator(host: string, port: number): void;
    /**
     * Returns a reference to the root or to the path specified in the provided
     * argument.
     *
     * @param path The relative string path or an existing Reference to a database
     * location.
     * @throws If a Reference is provided, throws if it does not belong to the
     * same project.
     * @return Firebase reference.
     */
    ref(path?: string): Reference;
    ref(path?: Reference): Reference;
    /**
     * Returns a reference to the root or the path specified in url.
     * We throw a exception if the url is not in the same domain as the
     * current repo.
     * @return Firebase reference.
     */
    refFromURL(url: string): Reference;
    private checkDeleted_;
    goOffline(): void;
    goOnline(): void;
}
